# Generated by Django 5.0.9 on 2025-01-12 12:24

from django.db import migrations


# Generated by Django 5.0.9 on 2025-01-11 14:29

def migrate_teams(apps, schema_editor):
    Team = apps.get_model("app_prime_league", "Team")
    ChannelTeam = apps.get_model("app_prime_league", "ChannelTeam")
    Channel = apps.get_model("app_prime_league", "Channel")
    Setting = apps.get_model("app_prime_league", "Setting")
    for team in Team.objects.all():
        if not team.discord_channel_id and not team.telegram_id:
            continue

        if team.telegram_id is not None:
            telegram_channel = Channel.objects.create(
                plattform="telegram",
                telegram_id=team.telegram_id,
                scouting_website=team.scouting_website,
                language=team.language,
            )
            channel_team = ChannelTeam.objects.create(channel=telegram_channel, team=team)

            for setting in team.setting_set.filter(channel_team=None):
                Setting.objects.create(
                    team=None,
                    attr_name=setting.attr_name,
                    attr_value=setting.attr_value,
                    channel_team=channel_team,
                )

        if team.discord_channel_id is not None:
            discord_channel = Channel.objects.create(
                plattform="discord",
                discord_guild_id=team.discord_guild_id,
                discord_webhook_id=team.discord_webhook_id,
                discord_webhook_token=team.discord_webhook_token,
                discord_channel_id=team.discord_channel_id,
                scouting_website=team.scouting_website,
                language=team.language,
            )
            channel_team = ChannelTeam.objects.create(channel=discord_channel, team=team, discord_role_id=team.discord_role_id)

            for setting in team.setting_set.filter(channel_team=None):
                Setting.objects.create(
                    team=None,
                    attr_name=setting.attr_name,
                    attr_value=setting.attr_value,
                    channel_team=channel_team,
                )

        team.setting_set.filter(channel_team=None).delete()

def reverse_migrate_teams(apps, schema_editor):
    ChannelTeam = apps.get_model("app_prime_league", "ChannelTeam")
    Channel = apps.get_model("app_prime_league", "Channel")
    for channel_team in ChannelTeam.objects.select_related("team", "channel"):
        channel_team.team.setting_set.filter(channel_team=None).delete()
        channel_team.settings.update(team=channel_team.team, channel_team=None)
        channel_team.delete()

    Channel.objects.all().delete()



def migrate_setting_expiring(apps, schema_editor):
    SettingsExpiring = apps.get_model("app_prime_league", "SettingsExpiring")
    SettingsExpiring.objects.all().delete()

class Migration(migrations.Migration):

    dependencies = [
        ('app_prime_league', '0046_alter_setting_unique_together_alter_setting_team_and_more'),
    ]

    operations = [
        migrations.RunPython(migrate_setting_expiring, reverse_code=migrate_setting_expiring),
        migrations.RunPython(migrate_teams, reverse_code=reverse_migrate_teams),
    ]


